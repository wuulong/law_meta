# docker-compose.yml

# 使用 Docker Compose 檔案格式的版本 '3.8'
version: '3.8'

# 定義所有服務
services:
  # Python 應用程式服務
  a2a:
    # 建構此服務的映像檔
    build:
      # 指定包含 Dockerfile 的目錄
      context: ./a2a
    # 給容器起一個易於識別的名稱
    container_name: a2a
    # 設定重啟策略，如果容器意外停止，總是嘗試重啟
    restart: always
    # 將宿主機的 30304 埠映射到容器的 30303 埠，這樣我們就可以從外部訪問
    ports:
      - "30304:30303"
    # 設定環境變數，這些變數會被 app.py 讀取
    environment:
      # 這些值必須與下面 db 服務中定義的環境變數相匹配
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      # 關鍵：DB_HOST 的值是 db 服務的名稱，Compose 會處理好 DNS 解析
      - DB_HOST=lawmeta-pg
      - DB_PORT=5432
    # 設定此服務的啟動依賴
    #depends_on:
    #  db:
        # 不僅等待 db 容器啟動，還要等待其健康檢查通過
    #     condition: service_healthy

  # PostgreSQL 資料庫服務
  db:
    # 建構此服務的映像檔
    build:
      # 指定包含 Dockerfile 的目錄
      context: ./pg
    # 給容器起一個易於識別的名稱
    container_name: lawmeta-pg
    # 設定重啟策略
    restart: always
    # 設定環境變數，官方 postgres 映像檔會使用這些變數來初始化資料庫
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    # 掛載一個具名 Volume 來持久化資料庫數據
    # 這樣即使容器被刪除，數據依然保留在 `db_data` 這個 Volume 中
    #volumes:
    #  - db_data:/var/lib/postgresql/data
    # (可選) 暴露埠口到主機，方便使用外部工具 (如 DBeaver, pgAdmin) 直接連接調試
    # 在生產中，如果只有 app 需要連接，可以不暴露此埠口
    ports:
      - "30199:5432"
    # 設定健康檢查，定期檢查資料庫是否準備好接收連接
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

# 在頂層定義具名 Volume
#volumes:
#  db_data:
    # driver: local (預設)
